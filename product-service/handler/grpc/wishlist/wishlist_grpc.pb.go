// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wishlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	GetWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error)
	CreateWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error)
	UpdateWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error)
	DeleteWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWishlists(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*WishlistList, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) GetWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error) {
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/GetWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error) {
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/CreateWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) UpdateWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*Wishlist, error) {
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/UpdateWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlist(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/DeleteWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishlists(ctx context.Context, in *Wishlist, opts ...grpc.CallOption) (*WishlistList, error) {
	out := new(WishlistList)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/GetWishlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility
type WishlistServiceServer interface {
	GetWishlist(context.Context, *Wishlist) (*Wishlist, error)
	CreateWishlist(context.Context, *Wishlist) (*Wishlist, error)
	UpdateWishlist(context.Context, *Wishlist) (*Wishlist, error)
	DeleteWishlist(context.Context, *Wishlist) (*emptypb.Empty, error)
	GetWishlists(context.Context, *Wishlist) (*WishlistList, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWishlistServiceServer struct {
}

func (UnimplementedWishlistServiceServer) GetWishlist(context.Context, *Wishlist) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *Wishlist) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) UpdateWishlist(context.Context, *Wishlist) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlist(context.Context, *Wishlist) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishlists(context.Context, *Wishlist) (*WishlistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlists not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_GetWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wishlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/GetWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishlist(ctx, req.(*Wishlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wishlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/CreateWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*Wishlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_UpdateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wishlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).UpdateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/UpdateWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).UpdateWishlist(ctx, req.(*Wishlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wishlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/DeleteWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, req.(*Wishlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wishlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/GetWishlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishlists(ctx, req.(*Wishlist))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWishlist",
			Handler:    _WishlistService_GetWishlist_Handler,
		},
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "UpdateWishlist",
			Handler:    _WishlistService_UpdateWishlist_Handler,
		},
		{
			MethodName: "DeleteWishlist",
			Handler:    _WishlistService_DeleteWishlist_Handler,
		},
		{
			MethodName: "GetWishlists",
			Handler:    _WishlistService_GetWishlists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handler/grpc/wishlist/wishlist.proto",
}
